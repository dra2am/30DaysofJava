//main : identfier for method
//void : a return type, nothing
//public : access modifier, this method is available everywhere
//static : no instance of a class is needed

//(String[] args) : this is a parameter

Data Types:
Primitives:
    boolean, 
    Character:char, 
    Integer: byte, short, int, long, 
    Floating-pont: float, double
Non-Primitives:
    String, Arr...etc
    
Arguments:
    *Information passed into a method (part of the calling)

    public static void main(String[] args){...}
    this method is expecting and arg that is a string
    in an array of args
    arg["number"] is the position of the arr the arg is in
    sysout("Hello " + args[0]) >>> will print the 
    first arg in arr
    add argument at the end of "java file.java" this will add
    it to arg array.

Parameter:
    *When we define a method, we give it parameters, when we
    call a method, we give it arguments
    *variables to store arguments

Control Flow:
    Java uses .equals to make a comparison
    for and while loops are similar to JS

Arrays:
    declare type and array before the name of array:
    int[] arrName = 
    then the size of the array:
    int[] arrName = new int[5]
    OR declare and populate array in one step
    int[] arrName = {1,2,3} 
    make a 2d array as follows: int[][] arrName = {...}


Lists and ArrayLists:
    List: the interface
    ArrayList: implementation.
    Interface: defines what requirements must be met for 
    implementation
    when we create an array list, it meets all the requirements
    to be considered a list

    List<Type it takes> nameList = new ArrayList<Type>()

    to add to List:
    nameList.add(value)

   Oracle docs for implementation

Stacks and Queues:
    Stack: first in is the last out (stack of dishes)
    Queues: first in first out (like a grocery line)

    Linked lists can be used as a Queue/Stack

Call Stack:
    stores information about the active method of a program

Classes:
    Keywords:
        public : an access modifier. unrestricted access
        to the class
        private : access modifier. no other class may access
        that class
        protected : only classes in the same package can 
        access that class

    the access modifier can also be removed

    encapsulation: hide the fields and methods from 
    access publicly. 

    generally vars inside classes will be private.
    getters and setters are public

    "this" refers to the instance variable when working 
    inside a method in a class 

    Created classes can be treated as a data type:
        ex: Triangle triangleA = new Triangle(args....)
        it is important to init a class instance w the 
        new keyword.
        classes have some automatic methods and functionality
        you can also create your own

